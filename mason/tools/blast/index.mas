
<%doc>
</%doc>

<%args>
$preselected_database => ''
$preselected_category => ''
$dataset_groups => []
$databases => {}
$programs
@input_options => ()
@parse_options => ()
$preload_seq => ''
$preload_id => ''
$preload_type => ''
</%args>

<%perl>
use JSON::Any;

my $menus = {};
foreach my $d (keys(%$databases)) { 
   $menus->{$d} = $m->scomp('/page/html_select.mas', name=>"database", id=>"database", choices => [ @{$databases->{$d}} ], selected=> $preselected_database );
}
# print STDERR "pre selected db: $preselected_database\n";

my $substitution_matrix_select = $m->scomp('/page/html_select.mas', 
   name=>"matrix", 
   id=>"matrix", 
   choices => [  [ 'BLOSUM62', 'BLOSUM62 (default)' ],
                 [ 'BLOSUM80', 'BLOSUM80 (recent divergence)' ],
		 [ 'BLOSUM45', 'BLOSUM45 (ancient divergence)' ],
		 'PAM30',
		 'PAM70',
              ]);

my $show_graphics_select = $m->scomp('/page/html_select.mas',  name => 'output_graphs', id=>'output_graphs',
        	      choices => [ [ 'bioperl_histogram', 'all' ],
	                	   'none',
			           [ 'bioperl_only', 'alignment summary only' ],
				   [ 'histogram_only', 'conservedness histogram only' ],
				 ],
				 ),

#print STDERR "INPUT OPTIONS: ".Data::Dumper::Dumper(\@input_options);
my $input_options_select = $m->scomp('/page/html_select.mas', name=>'input_options', id=>'input_options',
			      choices => \@input_options, selected=>$preload_type,
);

my @parse_options_selected = ();
foreach my $po (@parse_options) { 
  if ($po->[0] ne "Basic") { 
    push @parse_options_selected, $po;
  }
}


my $parse_options_select = $m->scomp('/page/html_select.mas', name=>'parse_options', id=>'parse_options', choices => [ map { $_->[0] } @parse_options ], multiple=>1, selected=> [ sort (map { $_->[0] } @parse_options_selected) ] );

print STDERR "SELECTED: ".(join ", ", (sort (map { $_->[0] } @parse_options) ))."\n\n\n";


my $db_type = {};
foreach my $g (keys %$databases) {
  foreach my $d (@{$databases->{$g}}) {  
     $db_type->{$d->[0]} = $d->[2];
  }
}
my $database_type_json = JSON::Any->encode($db_type);

#print STDERR Data::Dumper::Dumper($database_type_json);

my $q_type = {};
my $q_example = {};
foreach my $t (@input_options) {
  $q_type->{$t->[1]} = $t->[2];
  $q_example->{$t->[1]} = $t->[3];
}
#print STDERR Data::Dumper::Dumper($q_type);
my $input_option_json = JSON::Any->encode($q_type);
my $input_example_json = JSON::Any->encode($q_example);

my $preload = "";
if ($preload_id && $preload_type) { 
  $preload = $preload_id;
}
if ($preload_seq) { 
  $preload = $preload_seq;
}


#print STDERR "MENUS: ".Data::Dumper::Dumper($menus);

</%perl>

<& /util/import_javascript.mas, classes => [ 'jqueryui', 'CXGN.Blast' ] &>

<& /page/page_title.mas, title=>"BLAST" &>

<!-- <div class="boxbgcolor5">This is the new BLAST interface. The old interface is still available <a href="/tools/blast/index.pl">here</a>. Please <a href="mailto:sgn-feedback@solgenomics.net">let us know</a> how you like the new interface.</div><br /> -->

<div id="search_output" style="display:none;font-family:Lucida,monospace"></div>

<&| /page/info_section.mas, id=>"input_parameter_section", title=>"Input parameters", collapsible=>1, collapsed=>0, subtitle=>'<a href="/help/tools/blast">Help</a>' &>
  <input type="hidden" name="outformat" value="0" />
  <table border="0" align="center" summary="" cellpadding="0" cellspacing="5">
    <tr><td width="100" style="padding-top: 10px;"><b>Categories</b></td><td width="600">
	<& /page/html_select.mas, name=>'Datasets', choices=> $dataset_groups, id=>"dataset_select", name=>"dataset_select", selected=>"$preselected_category" &>

<!-- images to get direct access to the model plant dbs. db_id is the blast_db_id on the SGN database -->
<img class="fruit_icon" height="25" src="/documents/img/blast_icons/tomato.png" db_id="28" title="Tomato current DB">
<img class="fruit_icon" height="18" src="/documents/img/blast_icons/potato.png" db_id="10" title="Potato current DB">
<img class="fruit_icon" height="25" src="/documents/img/blast_icons/pepper.png" db_id="21" title="Pepper current DB">
<img class="fruit_icon" height="25" src="/documents/img/blast_icons/eggplant.png" db_id="29" title="Eggplant current DB">
<img class="fruit_icon" height="25" src="/documents/img/blast_icons/benth.png" db_id="9" title="N.benthamiana current DB">


</td><td rowspan="4" align="center"><div id="status_wheel"></div></td></tr>
    <tr><td><b>Databases</b></td>
      <td><span id="database_select"></span><a style="font-size: 80%" title="View details of each database" href="/tools/blast/dbinfo">db details</a>
    </td></tr>
    <tr><td><b>Program</b></td>
      <td><& /page/html_select.mas, name=>'program_select', id=>'program_select', choices=>$programs &>
    </td></tr>

<tr><td><b>Query</b></td><td>
  <% $input_options_select %>
  <a id="input_example" style="font-size: 80%">Show example</a>
	</td></tr>
<tr><td colspan="3">

<!-- div style="font-size: 80%">single sequence only, use Advanced for multiple</div -->
<textarea name="sequence" id="sequence" rows="8" cols="80"><% $preload %></textarea></td></tr>
    <tr><td colspan="3">
      <table width="100%"><tr>
         <td>

<div style="text-align: center">
	<button class="submit_blast_button" id="submit_blast_button" type="submit" name="search" value="Search">BLAST</button>
</div>
<br />

<&| /page/info_section.mas, title=>"Advanced Options", collapsible=>1, collapsed =>1, is_subsection=>"1" &>

	<& /page/info_table.mas, title=>'', data => [ 
	  'Expect (e-value) Threshold' => '<input id="evalue" class="blast_search_input_box" type="text" size="6" value="1e-10" name="expect" />',
	  'Substitution Matrix' => $substitution_matrix_select,
		'Outout Options' => $parse_options_select,
	  'Max. hits to show' => '<input id="maxhits" class="blast_search_input_box" type="text" name="maxhits" size="6" value="20" />',
	  'Filters' => '<input type="checkbox" name="filterq" checked="1" />Filter Low complexity',
	  __multicol => 2,
	  __border => 0,
	  __tableattrs => 'width="80%"',
	]
	&>
	
	
</&>

         </td>
      </tr>
      </table>
    </td></tr>
</table>
</&>

<&| /page/info_section.mas, title=>"Extract sequences from BLAST databases", collapsible=>1, collapsed =>1 &>
<br>
	<table>
		<tr>
			<td><input class="blast_search_input_box" value="putrescine" id="blast_desc" size="28"/></td>
			<td><button id="search_by_desc" class="submit_blast_button">Search</button></td>
			<td class="help_box">Select a BLAST database and paste a gene name or description such as: Solyc07g063040 or ribulose</td>
		</tr>
	</table>
</&>

<&| /page/info_section.mas, title=>"Status", collapsible=>1, collapsed =>0 &>
  <div id="blast_status">Please select your input parameters.</div>
</&>

<&| /page/info_section.mas, title=>"Results", collapsible=>1, collapsed=>0, subtitle=>'<a href="javascript:download();">Download</a>' &>
<table>
<tr><td><div id="prereqs"></div></td></tr>
<tr><td><div id="blast_report"></div></td></tr>
  </table>
</&>

<div id="jobid" style="display:none;"></div>

<script>


jQuery(document).ready(function() {
	
	//function to select category and database when click on fruit images
	jQuery('.fruit_icon').click( function() {
		var db_id = jQuery(this).attr('db_id');

		jQuery('#dataset_select').val(db_id);
		swap_menu(db_id);
	});
	
	swap_menu(jQuery('#dataset_select').find(':selected').attr('value'));

	jQuery('#sequence').attr('spellcheck',false);

	jQuery('#dataset_select').change( function() { 
	  var selectedId = jQuery('#dataset_select').find(':selected').attr('value');
	  swap_menu(selectedId);
	});

	var input_examples = eval(<% $input_example_json %>);
	var database_types = eval (<% $database_type_json %>);
	var input_option_types = eval(<% $input_option_json %>);

	jQuery('#input_example').click( function() { 
	  jQuery('#sequence').html( input_examples[jQuery('#input_options').val() ] );
	});

	jQuery('#submit_blast_button').click( function() { 
		var pasted_seq = jQuery('#sequence').val();
		
		if (pasted_seq.match(/>/)) {
			var seq_num = pasted_seq.match(/>/g);
		
			if (seq_num.length <= 20 ) {
			  run_blast(database_types, input_option_types);
			} else {
				alert("Please, do not run more than 20 sequences");
			}
		} else {
			run_blast(database_types, input_option_types);
		}
	});
	
	
	//search blastdb by description
	jQuery('#search_by_desc').click( function() { 
		var database = jQuery('#database').val();
		var blast_desc = jQuery('#blast_desc').val();
		// alert("db: "+database+", blast_desc: "+blast_desc);
		disable_ui();
		
		jQuery.ajax( {
			url: '/tools/blast/desc_search/',
			method: 'POST',
			data: {'blast_desc':blast_desc, 'database': database},
			success: function(response) {
				enable_ui();
				$('#search_output').html(response.output_seq);
				$('#search_output').dialog({
				draggable:true,
				resizable:true,
				modal: true,
				buttons: {
					Ok: function() {
						$( this ).dialog( "close" );
					}
				},
				width:700,
				height:500,
				closeOnEscape:true,
				title: "Results",
				open: function(event, ui) { $('.ui-dialog-titlebar-close').blur();},
				});
			},
			error: function(response) {
				alert("An error occurred. The service may not be available right now.");
				enable_ui();
				return;
			}
		});
		
	});
	
	function swap_menu(group_id) { 
	  var menu_html = eval( <% JSON::Any->encode($menus) %>);
	  jQuery('#database_select').html(menu_html[group_id]);
	}
	
	//use JQueryIu to define tooltip style
	$(function() {
		$( document ).tooltip({
			position: {
				my: "center bottom-20",
				at: "center top",
				using: function( position, feedback ) {
					$( this ).css( position );
					$( "<div>" )
					.addClass( "arrow" )
					.addClass( feedback.vertical )
					.addClass( feedback.horizontal )
					.appendTo( this );
				}
			}
		});
	});
	
});

</script>


<!-- STYLE -->
<style>
.seq_map {
	color: #777777;
	width: 700px;
	position:relative;
	overflow: auto;
	align: left;
}
.ui-dialog {
	position:relative;
}
#region_square {
	position:absolute;
	vertical-align:middle;
}
.help_dialog {
	color:blue;
	cursor:pointer
}
#desc_dialog {
	overflow: auto;
	position: relative;
}
.help_box {
	background-color:#EEEEFE;
	border-color:#AAA;
	border-width:2px;
	border-style:solid;
	border-radius:5px;
	padding-left: 10px;
	padding-right: 10px;
}
.ui-tooltip, .arrow:after {
	background: #000000;
	border: 2px solid white;
}
.ui-tooltip {
	padding: 5px 10px;
	color: white;
	border-radius: 10px;
	font: bold 12px "Helvetica Neue", Sans-Serif;
	box-shadow: 0 0 7px black;
}
.arrow {
	width: 70px;
	height: 16px;
	overflow: hidden;
	position: absolute;
	left: 50%;
	margin-left: -35px;
	bottom: -16px;
}
.arrow.top {
	top: -16px;
	bottom: auto;
}
.arrow.left {
	left: 20%;
}
.arrow:after {
	content: "";
	position: absolute;
	left: 20px;
	top: -20px;
	width: 25px;
	height: 25px;
	box-shadow: 6px 5px 9px -9px black;
	-webkit-transform: rotate(45deg);
	-moz-transform: rotate(45deg);
	-ms-transform: rotate(45deg);
	-o-transform: rotate(45deg);
	tranform: rotate(45deg);
}
.arrow.top:after {
	bottom: -20px;
	top: auto;
}

#sequence {
	background-color:#EEEEFE;
	border-color:#000;
	border-width:2px;
	border-style:solid;
	border-radius:5px;
	width: 700px;
	min-height: 80px;
	max-height: 300px;
	min-width: 700px;
	max-width: 700px;
}

.submit_blast_button {
background-color:#555555;
/*background-color:#4387FD;*/
border:0px;
border-radius:2px;
/*color:#fff;*/
color:#EEEEEE;
box-shadow: 1px 1px 0px 0px #C6C6C6;
font-family:Arial;
font-size:12px;
height:20px;
line-height:18px;
vertical-align: top;
}
.submit_blast_button:hover {
background-color:#444444;
/*background-color:#5EA1FF;*/
/*color:#acf;*/
color:#fff;
}
.submit_blast_button:active {
position:relative;
top:1px;
left:1px;
box-shadow: 0px 0px 0px 0px #fff;
}

.blast_search_input_box {
border-color:#AAA;
border-width:1px;
border-style:solid;
border-radius:5px;
height: 20px;
padding-left: 5px;
}

</style>
